
List 인터페이스 
	1. 리스트명.add( 객체 ) 		: 마지막 인덱스에 객체 추가
	1. 리스트명.add( 인덱스 , 객체 ) 		: 해당 인덱스에 객체 삽입

	2. 리스트명.size()			: 리스트내 객체수

	3. 리스트명.get( 인덱스) 		: 해당 인덱스의 객체 호출 

	4. 리스트명.remove( 인덱스 ) 		: 해당 인덱스의 객체 삭제 
	4. 리스트명.remove( 객체 ) 		: 해당 객체 삭제 

	5. 리스트명.clear() 			: 리스트내 모든 객체 삭제 

	6. 리스트명.contains(객체)		: 해당 객체 여부 확인 [ true / false ]
	7. 리스트명.indexOf(객체)		: 해당 객체 인덱스 번호[ 있을경우 = 번호 / 없을경우 = -1 ]
	8. 리스트명.isEmpty( )		: 리스트가 비어있는경우 [ true / flase ]
	9. 리스트명.iterator( )		: 리스트내 객체 순회

	ArrayList 클래스
		ArrayList< 자료형/클래스 > 리스트명 = new ArrayList<>();	
		* 동기화 지원X
		* 추가/검색 빠름
	
		객체1 	객체2 	객체3 	객체4	객체5
		[0]	[1]	[2]	[3]	[4]

	Vector 클래스 
		Vector< 자료형/클래스 > 리스트명 = new Vector<>();
		* 동기화 지원O

	LinkedList 클래스 
		* 구조가 다름
		* 중간 삽입/삭제 빠름

		객체1<--링크--> 객체2 <----> 객체3 <---> 객체4 <---> 객체5

set 인터페이스 
	* 순서[인덱스]없다. [ 데이터로 식별하기 때문에 중복 불가능 ]
		- 데이터 --> 해시함수[ .hashCode() ] --> 16진수 주소 	

	1. .add( 객체 )
	2. .size( )
		* .get() : 인덱스가 없어서 x
	3. .remove( 객체 )
	4. .clear( ) 
	5. .isEmpty( )
	6.* iterator( )
	7. .contains( 객체 )

Map 인터페이스 
	* 순서[인덱스]없다.
	* key : 중복불가 , value : 중복가능  : entry
	1.  .put( 키 : 값 )	: 엔트리 추가 
	2.  .get( 키 )	: 해당 키의 값 호출
	3.  .remove( 키 )	: 해당 키의 엔트리 삭제 
	4.  .keySet()	: 모든 키 를 호출 [ set ]
	5.  .size()
	6.  .containskey( 키 ) : 해당 키가 존재하는지 확인 
	7.  .containsvalue( 값 ) : 해당 값이 존재하는지 확인 

-----------------------------------------------------------------------------------------------------------

	List		Set		Map
	1. 인덱스O		1.인덱스X		1. 인덱스x
	2. 중복허용O	2.중복허용X	2. 엔트리( 키 , 값 ) 
					3. 키(set) : 중복 불가능 
					4. 값 : 중복 가능 

	[ 인덱스 사용 ]			[ 키 사용 ]

