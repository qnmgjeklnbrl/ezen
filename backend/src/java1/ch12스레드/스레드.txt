상속과 구현이란 ? 
	extends		[ 상속 = 연장 ]
		class A클래스  extends  B클래스 		: B클래스의 설계된 메모리를 A클래스에게 물려준다.
						: A클래스는 B클래스의 멤버를 사용할수 있다.
						: B클래스[부모클래스] A클래스[자식클래스]
						* 상속 1번 만 받는다.

	implements  	[ 구현 ]			: B인터페이스의 추상된 메소드를 A클래스가 구현한다. 
		class A클래스  implements  B인터페이스 	: B인터페이스에 선언된 메소드를 구현해주는 A클래스 
						: * 구현 여러번 가능하다.
	
	인터페이스란?	서로 다른 클래스[설계] 들을 [*]동일한 목적하의 조작
		
		LG 클래스

		삼성 클래스 		리모콘[인터페이스]

		롯데 클래스

스레드 클래스 

	[작업스레드 생성 준비 ]
	1. run메소드 구현 --> 2. start메소드 실행 
		
		1. 작업스레드 인터페이스/클래스 선택기준
			1.  extends  vs  implements  : 상속1번 vs 구현 여러번
			2.  익명 사용여부 : 작업스레드정의 1번 vs 작업스레드 정의 여러번 
			
	1. Runnable 클래스 
		- 1. 구현객체 
			-- 구현클래스 
			CLASS 구현클래스 implements  Runnable{    run( 스레드가 실행할코드  );      }

		Runnable 구현객체 = new 구현클래스();
		Thread 객체명 = new Thread( run구현객체 );
		객체명.start();

	
		- 2. 익명 구현 객체
		Thread 객체명 = new Thread(  new Runnable(){  run( 스레드가 실행할코드  )     );
		객체명.start();

	2. Thread 클래스 
		- 3. 
			-- 하위클래스 
			CLASS 하위클래스 extends Thread{    run( 스레드가 실행할코드  );  }

		하위클래스  객체명 = new 하위클래스 (  );
		객체명.start();

		- 4. 익명 자식 객체
		Thread  객체명 = new Thread(){  run( 스레드가 실행할코드  );  };
		객체명.start();

-- 스레드 메소드
	1. run( 스레드가 실행할 코드 );		: 멀티작업할 코드 정의
	2. start( );			: run메소드 실행 
	3. 
		setname("새로운스레드이름")	: 스레드 이름 정의하기[ 생략시 Thread-X ]
		getname( );		: 스레드 이름 호출 
	4. stop( ) ;			: 스레드 종료	[ 비권장 ]
					stop 필드[변수] 구현	[권장]  


	
-- 동기화 [ synchronized ] 
	1. 여러개의 스레드가 동일한 객체를 사용할때 대기상태 [ 들어온 순서대로 처리 ]
		* 싱글스레드에서 X
	2. 컬렉션 프레임워크
		ArrayList 		: 동기화x  	- 싱글스레드용
		Vector 		: 동기화o  	- 멀티스레드용
		
		HashMap		: 동기화x	- 싱글스레드용
		HashTable 	: 동기화o 	- 멀티스레드용
	

	

